import cv2
import mediapipe as mp
import keyboard
import time

# Initialize MediaPipe
mp_drawing = mp.solutions.drawing_utils
mp_hands = mp.solutions.hands
hands = mp_hands.Hands(max_num_hands=1, min_detection_confidence=0.5)

# Access the webcam
cap = cv2.VideoCapture(0)

# Create a named window for display
cv2.namedWindow('Hand Detection')

# Initialize time of last activation and cooldown duration
last_activation_time = time.time()
cooldown_duration = 5  # in seconds

# Define index finger and thumb landmark indices
INDEX_FINGER_TIP = mp_hands.HandLandmark.INDEX_FINGER_TIP
THUMB_TIP = mp_hands.HandLandmark.THUMB_TIP

while cap.isOpened():
    success, image = cap.read()
    if not success:
        print("Ignoring empty camera frame.")
        continue

    image.flags.writeable = False
    image = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)
    results = hands.process(image)
    image.flags.writeable = True
    image = cv2.cvtColor(image, cv2.COLOR_RGB2BGR)

    if results.multi_hand_landmarks:
        current_time = time.time()
        if current_time - last_activation_time >= cooldown_duration:
            for hand_landmarks in results.multi_hand_landmarks:
                # Calculate Euclidean distance between fingertips
                index_finger_x = hand_landmarks.landmark[INDEX_FINGER_TIP].x
                index_finger_y = hand_landmarks.landmark[INDEX_FINGER_TIP].y
                thumb_x = hand_landmarks.landmark[THUMB_TIP].x
                thumb_y = hand_landmarks.landmark[THUMB_TIP].y
                distance = ((index_finger_x - thumb_x) ** 2 + (index_finger_y - thumb_y) ** 2) ** 0.5

                # Define a threshold for fingertip closeness
                touching_threshold = 0.05  # Adjust this value as needed

                if distance <= touching_threshold:
                    # Fingers are touching, trigger key combo
                    keyboard.press_and_release('alt+tab')
                    last_activation_time = current_time

                # Draw rectangle and landmarks (optional)
                x_min = min([lm.x for lm in hand_landmarks.landmark])
                x_max = max([lm.x for lm in hand_landmarks.landmark])
                y_min = min([lm.y for lm in hand_landmarks.landmark])
                y_max = max([lm.y for lm in hand_landmarks.landmark])
                cv2.rectangle(image, (int(x_min), int(y_min)), (int(x_max), int(y_max)), (0, 255, 0), 2)
                mp_drawing.draw_landmarks(image, hand_landmarks, mp_hands.HAND_CONNECTIONS)

    cv2.imshow('Hand Detection', image)
    if cv2.waitKey(5) & 0xFF == 27:  # Exit on 'Esc' key press
        break

cap.release()
cv2.destroyAllWindows()
